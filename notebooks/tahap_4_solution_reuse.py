# -*- coding: utf-8 -*-
"""Tahap 4 Solution Reuse.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1shVSZengi0DSCsQleMLJju7d1PhwAQ71

# **Tahap 4 – Solution Reuse**

---
"""

import pandas as pd
import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# === [ Load Case Data ] ===
df = pd.read_csv("/content/drive/MyDrive/Penalaran Komputer/UAS/Data/processed/cases.csv")
df["text_full"] = df["text_full"].fillna("")
df["ringkasan_fakta"] = df["ringkasan_fakta"].fillna("Tidak tersedia")

# === [ TF-IDF Vectorization untuk Retrieval ] ===
vectorizer = TfidfVectorizer()
case_vectors = vectorizer.fit_transform(df["text_full"])

# === [ Load Query ] ===
with open("/content/drive/MyDrive/Penalaran Komputer/UAS/Data/eval/queries.json", "r") as f:
    queries = json.load(f)

# === [ Fungsi Retrieval ] ===
def retrieve(query: str, k: int = 5):
    q_vec = vectorizer.transform([query])
    sim = cosine_similarity(q_vec, case_vectors)[0]
    top_k_idx = sim.argsort()[-k:][::-1]
    top_k_case_ids = df.iloc[top_k_idx]["case_id"].tolist()
    top_k_sim = sim[top_k_idx]
    return list(zip(top_k_case_ids, top_k_sim))  # return tuple (id, similarity)

# === [ Bangun Dictionary Case Solution ] ===
case_solutions = dict(zip(df["case_id"], df["ringkasan_fakta"]))

# === [ Voting & Weighted Prediction ] ===
def predict_outcome(query: str, k: int = 5) -> str:
    top_k = retrieve(query, k)
    solutions = [case_solutions.get(case_id, "") for case_id, _ in top_k]

    # Majority vote
    from collections import Counter
    counter = Counter(solutions)
    majority = counter.most_common(1)[0][0]

    return majority, [case_id for case_id, _ in top_k]

# === [ Jalankan Prediksi untuk Semua Query ] ===
predictions = []
for q in queries:
    predicted_solution, top_ids = predict_outcome(q["query_text"], k=5)
    predictions.append({
        "query_id": q["query_id"],
        "predicted_solution": predicted_solution,
        "top_5_case_ids": top_ids
    })

# === [ Simpan ke CSV ] ===
df_pred = pd.DataFrame(predictions)
output_path = "/content/drive/MyDrive/Penalaran Komputer/UAS/Data/results/predictions.csv"
df_pred.to_csv(output_path, index=False)
print(f"✅ Hasil prediksi disimpan di {output_path}")

import json

ground_truth_solution = {
    "q1": "Menjatuhkan pidana penjara kepada Terdakwa selama 4 (empat) tahun",
    "q2": "Menjatuhkan pidana penjara selama 2 (dua) tahun",
    "q3": "Menjatuhkan pidana kepada Terdakwa selama 1 (satu) tahun penjara",
    "q4": "Menjatuhkan pidana penjara kepada Terdakwa selama 1 (satu) tahun dan 6 (enam) bulan",
    "q5": "Menghukum Terdakwa dengan pidana penjara selama 2 (dua) tahun"
}

with open("/content/drive/MyDrive/Penalaran Komputer/UAS/Data/eval/ground_truth_solution.json", "w", encoding="utf-8") as f:
    json.dump(ground_truth_solution, f, indent=2, ensure_ascii=False)

print("✅ File ground_truth_solution.json berhasil disimpan.")